{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Arrow Functions",
  "steps": [
    {
      "file": "main.js",
      "description": "# Arrow Function\r\nThe arrow function is a compact version of the standard function expression, which make them desirable when passing anonymous functions to methods.",
      "line": 1
    },
    {
      "file": "main.js",
      "description": "## Task\r\n1. Create a function to double a number(parameter) using an arrow function",
      "line": 10
    },
    {
      "file": "main.js",
      "description": "# Functional methods\r\nMethods that take a function as an argument\r\n",
      "line": 21
    },
    {
      "file": "main.js",
      "description": "## forEach()\r\nInvoke a function for each item in an array. Note that the forEach() method does not return a new array. \r\n[more...](https://imdac.github.io/modules/js/declarative-programming/functional-array-methods.html#foreach)\r\n\r\n1. Print the length of each string using forEach()\r\n> Hints:\r\n> - Define the Array of strings like `[\"apple\", \"banana\", \"orange\", \"kiwi\", \"grape\"]`\r\n> - Call the method forEach() using the dot notation like `myArray.forEach(anonymous function)`\r\n> - Create an arrow function that rceives one parameter (one word/fruit of the array), and return a string with the length like `The length of \"${word}\" is ${word.length}`\r\n",
      "line": 22
    },
    {
      "file": "main.js",
      "description": "## Maps\r\nThe map() creates a new array with the results of calling a provided function on every item in the calling array\r\n\r\n1. Create an array of temperatures from Celsius to Fahrenheit using map(). Assign the new array to a variable.\r\n>Hints: formula `(celsius * 9/5) + 32`",
      "line": 39
    },
    {
      "file": "main.js",
      "description": "## Filter\r\n\r\nCreates a new array with all items that pass the test implemented by the provided function\r\n\r\n1. Filter an array of products to get only the affordable products (price <= 50)",
      "line": 47
    },
    {
      "file": "main.js",
      "description": "## Find\r\n\r\nThe find() method returns the value of the first element that passes the test implemented by the provided function.\r\n\r\n1. Find the first name that starts with a specific letter(s); Make it case-insensitive\r\n\r\n> Hints:\r\n> - use `toUpperCase()` method\r\n> - use `startsWith()` method",
      "line": 61
    },
    {
      "file": "main.js",
      "description": "## Reduce\r\n\r\nThe reduce() method take each item of an array and reduces them down to a single value by calling the provided function on each item. \r\n\r\n1. Calculate the total price of items in a shopping cart",
      "line": 71
    },
    {
      "file": "main.js",
      "description": "## Sort\r\nThe sort() method takes a function as an argument to handle the sorting. The sort method sorts elements in place, which means the method will alter the provided array.\r\n\r\n1. Use the sort() method to sort students by last name",
      "line": 90
    },
    {
      "file": "main.js",
      "description": "## Reduce\r\nThe reduce() method take each item of an array and reduces them down to a single value by calling the provided function on each item. \r\n\r\n",
      "line": 70
    }
  ]
}